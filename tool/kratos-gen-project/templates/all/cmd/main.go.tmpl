package main

import (
	"context"
	"flag"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.ModPrefix}}{{.Name}}/api"
	"{{.ModPrefix}}{{.Name}}/internal/di"

	"github.com/iwannay/kratos/pkg/conf/env"
	"github.com/iwannay/kratos/pkg/conf/paladin"
	"github.com/iwannay/kratos/pkg/log"
	"github.com/iwannay/kratos/pkg/naming"
	"github.com/iwannay/kratos/pkg/naming/etcd"
	"github.com/iwannay/kratos/pkg/net/rpc/warden/resolver"
)

func main() {
	flag.Parse()
	log.Init(nil) // debug flag: log.dir={path}
	defer log.Close()
	log.Info("{{.Name}} start")
	paladin.Init()

	// 当使用命令行初始化apollo时需要使用以下参数
	// flag.StringVar(&confAppID, "apollo.appid", "", "apollo app id")
	// flag.StringVar(&confCluster, "apollo.cluster", "", "apollo cluster")
	// flag.StringVar(&confCacheDir, "apollo.cachedir", "/tmp", "apollo cache dir")
	// flag.StringVar(&confMetaAddr, "apollo.metaaddr", "", "apollo meta server addr, e.g. localhost:8080")
	// flag.StringVar(&confNamespaces, "apollo.namespaces", "", "subscribed apollo namespaces, comma separated, e.g. app.yml,mysql.yml")
	// if err := paladin.Init(apollo.PaladinDriverApollo); err != nil {
	// 	panic(err)
	// }

	// NOTE: 注意这段代码，表示要使用etcd进行服务发现
	// NOTE: 在启动应用时，可以通过flag(-etcd.endpoints) 或者 环境配置(ETCD_ENDPOINTS)指定etcd节点
	// NOTE: 如果需要自己指定配置时 需要同时设置DialTimeout 与 DialOptions: []grpc.DialOption{grpc.WithBlock()}
	resolver.Register(etcd.Builder(nil))
	// 这里需要填入真实的ip和端口
	// 服务注册
	cancel := RegisterSvc("localhost", "9000")

	_, closeFunc, err := di.InitApp()
	if err != nil {
		panic(err)
	}
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)
	for {
		s := <-c
		log.Info("get a signal %s", s.String())
		switch s {
		case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:
			closeFunc()
			cancel()
			log.Info("{{.Name}} exit")
			time.Sleep(time.Second)
			return
		case syscall.SIGHUP:
		default:
			return
		}
	}
}

func RegisterSvc(ip string, port string) context.CancelFunc {
	hn, _ := os.Hostname()
	dis, err := etcd.New(nil)
	if err != nil {
		panic(err)
	}
	ins := &naming.Instance{
		Zone:     env.Zone,
		Env:      env.DeployEnv,
		AppID:    api.AppID,
		Hostname: hn,
		Addrs: []string{
			"grpc://" + ip + ":" + port,
		},
	}

	cancel, err := dis.Register(context.Background(), ins)
	if err != nil {
		panic(err)
	}

	return cancel
}
